/**
 * Convert
 * Author: Shady Ibrahim
 */

package main;

import java.io.File;
import java.io.PrintStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author shady
 */
public class letsConvert extends javax.swing.JFrame {

    /**
     * Creates new form letsConvert
     */
    public letsConvert()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmboxConvertTypes = new javax.swing.JComboBox();
        lblMain = new javax.swing.JLabel();
        ScrollPaneMain = new javax.swing.JScrollPane();
        txtAreaMain = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        cmboxConvertTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose one...", "Binary To Decimal", "BinaryToHexaDecimal", "BinaryToString", "DecimalToBinary", "DecimalToHexaDecimal", "HexaDecimalToBinary", "HexaDecimalToDecimal", "StringToBinary" }));
        cmboxConvertTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxConvertTypesActionPerformed(evt);
            }
        });

        lblMain.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        lblMain.setText("Conversion Types:");

        txtAreaMain.setColumns(20);
        txtAreaMain.setRows(5);
        txtAreaMain.setText("Enter text to convert here.");
        txtAreaMain.setAutoscrolls(false);
        ScrollPaneMain.setViewportView(txtAreaMain);
        txtAreaMain.getAccessibleContext().setAccessibleName("");

        btnSave.setText("Save to File...");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblMain)
                        .addComponent(cmboxConvertTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblMain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmboxConvertTypes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ScrollPaneMain)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmboxConvertTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmboxConvertTypesActionPerformed

        Scanner input = new Scanner(txtAreaMain.getText());

        if (cmboxConvertTypes.getSelectedItem().equals("Binary To Decimal")) {

            ArrayList<Integer> numbers = new ArrayList<>();
            String output = "";
            int scount = 0;

            while (input.hasNextInt()) {

                numbers.add(input.nextInt());

            }

            int n;
            for (int i = 0; i < numbers.size(); i++) {
                n = Integer.parseInt(Integer.toString(numbers.get(i)), 2);

                if ((i + 1) != numbers.size()) {

                    output = output + n + ", ";

                } else {

                    output = output + n + " ";

                }

                txtAreaMain.setText(output);

            }
        } else if (cmboxConvertTypes.getSelectedItem().equals("BinaryToHexaDecimal")) {

            ArrayList<Integer> numbers = new ArrayList<>();
            String output = "";
            int scount = 0;

            while (input.hasNextInt()) {

                numbers.add(input.nextInt());

            }

            String n;
            for (int i = 0; i < numbers.size(); i++) {
                
                n = Integer.toHexString(numbers.get(i));

                if ((i + 1) != numbers.size()) {

                    output = output + n + ", ";

                } else {

                    output = output + n + " ";

                }

                txtAreaMain.setText(output);

            }
        } else if (cmboxConvertTypes.getSelectedItem().equals("BinaryToString")) {

            ArrayList<Integer> info = new ArrayList<>();
            String output = "";

            while(input.hasNextInt())
            {
                info.add(input.nextInt());
            }                        

            for (int i = 0; i < info.size(); i++) {

                if ((i + 1) != info.size()) {

                    output = output + ((char)Integer.parseInt(Integer.toString(info.get(i)), 2)) + ", ";

                }
                else
                {
                    output = output + ((char)Integer.parseInt(Integer.toString(info.get(i)), 2)) + " ";
                }                                
            }

            txtAreaMain.setText(output);
        }
        else if (cmboxConvertTypes.getSelectedItem().equals("DecimalToBinary")) {
            ArrayList<String> numbers = new ArrayList<>();
            String output = "";
            int acount = 0;
            int scount = 1;
            int arrl = 1;

            while(input.hasNext())
            {
                numbers.add(input.next()); 
            }
            
            double newstring = Double.parseDouble(numbers.get(0));

            while (arrl >= 1) {

                acount++;
                scount++;

                while (newstring >= 0) {

                    if (newstring % 2 == 1) {

                        output = output + '1';
                        newstring = newstring / 2 - 0.5;

                    } else if (newstring % 2 == 0) {

                        output = output + '0';
                        newstring = newstring / 2;

                    }

                    if (newstring == 0) {

                        newstring = newstring - 1;
                    }
                }
                arrl = numbers.size() - acount;

                if (arrl >= 1) {

                    output = output + "     ";
                    newstring = Double.parseDouble(numbers.get(numbers.size() - scount));
                    
                } else {

                    break;
                }
            }
            
            txtAreaMain.setText(output);
            
        }
        else if(cmboxConvertTypes.getSelectedItem().equals("DecimalToHexaDecimal"))
        {
            String output = "";
            ArrayList<String> numbers = new ArrayList<>();
            
            while(input.hasNext())
            {
                numbers.add(input.next());
            }
            
            for(int i = 0; i < numbers.size(); i++)
            {
                if(i + 1 == numbers.size())
                {
                    output = output + Integer.toHexString(Integer.parseInt(numbers.get(i))) + " ";
                }
                else
                {
                    output = output + Integer.toHexString(Integer.parseInt(numbers.get(i))) + ", ";
                }
            }
            
            txtAreaMain.setText(output);
            
        }
        else if(cmboxConvertTypes.getSelectedItem().equals("HexaDecimalToBinary"))
        {
            ArrayList<String> data = new ArrayList<>();
            String output = "";
            
            while(input.hasNext())
            {
                data.add(input.next());
            }
            
            for(int i = 0; i < data.size(); i++)
            {                
                if(i + 1 == data.size())
                {
                    output = output + new BigInteger(data.get(i), 16).toString(2) + " ";
                }
                else
                {
                    output = output + new BigInteger(data.get(i), 16).toString(2) + ", ";
                }                
            }
            
            txtAreaMain.setText(output);            
        }
        else if(cmboxConvertTypes.getSelectedItem().equals("HexaDecimalToDecimal"))
        {
            String output = "";

            ArrayList<String> data = new ArrayList<>();

            while(input.hasNext())
            {
                data.add(input.next());
            }           

            for (int i = 0; i < data.size(); i++)
            {
                if(i + 1 == data.size())
                {
                    output = output + Integer.parseInt(data.get(i), 16) + " ";
                }
                else
                {
                    output = output + Integer.parseInt(data.get(i), 16) + ", ";
                } 
            }

            txtAreaMain.setText(output);
        }
        else if(cmboxConvertTypes.getSelectedItem().equals("StringToBinary"))
        {
            String s = input.nextLine();

            byte[] bytes = s.getBytes();
            StringBuilder binary = new StringBuilder();
            for (byte b : bytes)
            {
                int val = b;
                for (int i = 0; i < 8; i++)
                {
                    binary.append((val & 128) == 0 ? 0 : 1);
                    val <<= 1;
                }
                binary.append(' ');
            }
                                    
           txtAreaMain.setText(binary.toString());
        }
    }//GEN-LAST:event_cmboxConvertTypesActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
       String name = JOptionPane.showInputDialog(null,"Enter name for file: ", "Save Conversion", JOptionPane.INFORMATION_MESSAGE);
       
       try
       {
           File saveFile = new File (name + ".txt");
           int x = 1;
           
           if(saveFile.exists())
           {
               x = 0;
               while(x == 0)
               {
                   name = JOptionPane.showInputDialog(null,"Name already in use! Please choose another: ", "Save Conversion", JOptionPane.QUESTION_MESSAGE);
                   
                   if(saveFile.exists() == false)
                   {
                       x = 0;
                   }
               }
           }
           else
           {               
               saveFile.createNewFile();
               PrintStream printer = new PrintStream(saveFile);
               printer.println(txtAreaMain.getText());
               JOptionPane.showMessageDialog(null,"Save Successful!", "File Saved", JOptionPane.INFORMATION_MESSAGE);               
           }
           
       }
       catch(Exception e)
       {
           System.out.println("Unable to save.");
       }        
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(letsConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(letsConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(letsConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(letsConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new letsConvert().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneMain;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmboxConvertTypes;
    private javax.swing.JLabel lblMain;
    private javax.swing.JTextArea txtAreaMain;
    // End of variables declaration//GEN-END:variables
}
